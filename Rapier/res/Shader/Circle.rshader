//START VERTEX
#version 450 core
			
layout(location = 0) in vec3 a_Position;
layout(location = 1) in vec4 a_Color;
layout(location = 2) in vec2 a_TextureCoord;
layout(location = 3) in int a_TextureIndex;
layout(location = 4) in int a_EntityId;
layout(location = 5) in vec2 a_LocalPosition;
layout(location = 6) in float a_MinimumRadius;

layout(location = 0) out vec2 v_TextureCoord;
layout(location = 1) out vec4 v_Color;
layout(location = 2) out flat int v_TextureIndex;
layout(location = 3) out flat int v_EntityId;
layout(location = 4) out vec2 v_LocalPosition;
layout(location = 5) out float v_MinimumRadius;

uniform mat4 u_ViewProjection;

void main()
{
	v_Color = a_Color;
	v_TextureCoord = a_TextureCoord;
	v_TextureIndex = a_TextureIndex;
	v_EntityId = a_EntityId;
	v_LocalPosition = a_LocalPosition;
	v_MinimumRadius = a_MinimumRadius;
	gl_Position = u_ViewProjection * vec4(a_Position, 1.0);
}

//START FRAGMENT
#version 450 core

layout(location = 0) out vec4 color;
layout(location = 1) out int EntityId;

layout(location = 0) in vec2 v_TextureCoord;
layout(location = 1) in vec4 v_Color;
layout(location = 2) in flat int v_TextureIndex;
layout(location = 3) in flat int v_EntityId;
layout(location = 4) in vec2 v_LocalPosition;
layout(location = 5) in float v_MinimumRadius;

uniform sampler2D u_Texture[32];

void main()
{
	float distance = v_LocalPosition.x * v_LocalPosition.x + v_LocalPosition.y * v_LocalPosition.y;
	if(distance > 1.0 || distance < v_MinimumRadius)
		discard;

	color = texture(u_Texture[v_TextureIndex], v_TextureCoord) * v_Color;
	if(color.a == 0.0)
		discard;

	EntityId = v_EntityId;
}